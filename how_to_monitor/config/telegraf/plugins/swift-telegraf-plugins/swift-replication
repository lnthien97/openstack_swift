#!/usr/bin/python
import myfunction as my
import re
import json
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('-r', '--role', help='Server role account|container|object',
                    default='object')
args = parser.parse_args()

# Example output
#[replication_failure] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%, no_result: 0, reported: 5
#[replication_success] low: 19660, high: 19662, avg: 19660.8, total: 98304, Failed: 0.0%, no_result: 0, reported: 5
#[replication_time] low: 1, high: 1, avg: 1.5, total: 7, Failed: 0.0%, no_result: 0, reported: 5
#[replication_attempted] low: 9830, high: 9831, avg: 9830.4, total: 49152, Failed: 0.0%, no_result: 0, reported: 5

_out_cmd = my.call_cmd("swift-recon %s -r" % args.role)

data={}
data['name'] = 'swift-replication'
data['role'] = "{}-server".format(args.role)

for line in _out_cmd.splitlines():

    matchObj_failure = my.matchObj("\[replication_failure\] low: (\d+), high: (\d+), avg: (\d+|\d+\.\d+), total: (\d+), Failed: (\d+|\d+\.\d+)\%, .*", line)
    if matchObj_failure is not None:
        data['failure-low'] = int(matchObj_failure.group(1))
        data['failure-high'] = int(matchObj_failure.group(2))
        data['failure-avg'] = float(matchObj_failure.group(3))
        data['failure-total'] = int(matchObj_failure.group(4))
        data['failure-reports-percent'] = round(float(matchObj_failure.group(5)),0)

    matchObj_success = my.matchObj("\[replication_success\] low: (\d+), high: (\d+), avg: (\d+|\d+\.\d+), total: (\d+), Failed: (\d+|\d+\.\d+)\%, .*", line)
    if matchObj_success is not None:
        data['success-low'] = int(matchObj_success.group(1))
        data['success-high'] = int(matchObj_success.group(2))
        data['success-avg'] = float(matchObj_success.group(3))
        data['success-total'] = int(matchObj_success.group(4))
        data['success-reports-percent'] = round(float(matchObj_success.group(5)),0)

    matchObj_attempted = my.matchObj("\[replication_attempted\] low: (\d+), high: (\d+), avg: (\d+|\d+\.\d+), total: (\d+), Failed: (\d+|\d+\.\d+)\%, .*", line)
    if matchObj_attempted is not None:
        data['attempted-low'] = int(matchObj_attempted.group(1))
        data['attempted-high'] = int(matchObj_attempted.group(2))
        data['attempted-avg'] = float(matchObj_attempted.group(3))
        data['attempted-total'] = int(matchObj_attempted.group(4))
        data['attempted-reports-percent'] = round(float(matchObj_attempted.group(5)),0)

    matchObj_time = my.matchObj("\[replication_time\] low: (\d+), high: (\d+), avg: (\d+|\d+\.\d+), total: (\d+), Failed: (\d+|\d+\.\d+)\%, .*", line)
    if matchObj_time is not None:
        data['time-low'] = int(matchObj_time.group(1))
        data['time-high'] = int(matchObj_time.group(2))
        data['time-avg'] = float(matchObj_time.group(3))
        data['time-total'] = int(matchObj_time.group(4))
        data['time-reports-percent'] = round(float(matchObj_time.group(5)),0)

print json.dumps(data)
